package PredictiveWeb;

import java.lang.reflect.InvocationTargetException;

import com.kxen.CommonInterf.DataTable;
import com.kxen.CommonInterf.KxenClassFactory;
import com.kxen.CommonInterf.KxenModeTag;
import com.kxen.CommonInterf.KxenModel;
import com.kxen.CommonInterf.KxenParameter;
import com.kxen.CommonInterf.KxenTransform;
import com.kxen.CommonInterf.Exception.KxenAbortException;
import com.kxen.CommonInterf.KxenClassFactory.DynamicMethodException;

/**
 * @author davidu
 *
 */
public class KxTutorial {

	// ----------------- VARIABLES OF THE CLASS -------------------------------

	// ----------------- Variables to initialize the KXEN engine --------------
	/** Place containing the Config file */
	private static final String CONFIG_DIR = "./resources";

	/** Name of the config file. */
	private static final String CONFIG_FILE = "KxConfig.cfg";
	// ----------------- Default parameters for the input data access ---------

	/** Default value for the main transformation of the model */
	private static String sModelTransformation = "Kxen.RobustRegression";

	/** Default value for the kind of store used for reading data */
	private static String sStoreClass = "Kxen.ODBCStore";

	/**
	 * Default value for the Name of the store to open, in this case it is the
	 * path of the current directory.
	 */
	private static String sStoreName = "books";

	/** Default value for the Name of the data file to open as a space */
	private static String sDataFile = "CollectedData";

	/**
	 * Default value for the description file to use for the data file.
	 */
	private static String sDescriptionFile = "Desc_CollectedData";

	// ----------------- Default values for saving model ----------------------

	/** Default value for the Name of the store */
	private static String sModelStoreClass = "Kxen.FileStore";

	/**
	 * Default value for the Store name. It is a path of the upper directory.
	 */
	private static String sModelStoreName = "./resources/Models";

	/**
	 * Default value for the Space Name. Name of a file to append or create in
	 * the disk.
	 */
	private static String sModelSpaceName = "MyModel.mdl";

	/** Default value for the Name of the model to be saved */
	private static String sModelName = "MyModel";

	/** Default value for the Name of the store */
	private static String sModelComment = "Model generated by KxTutorial.java";

	// ----------------- Default values for applying the model ----------------
	/**
	 * Default value for the Name of the space to open in the main store to use
	 * the model.
	 */
	private static String sUsingModelInput = "RealTimeData";

	/**
	 * Default value for the Name of the space to put the results of the model
	 * on the data set to use.
	 */
	private static String sUsingModelOutput = "Predicted_Output";

	// ----------------- Other default values ---------------------------------

	/** KXEN Model oject. */
	private KxenModel mModel = null;

	/** KXEN Object Factory. */
	private KxenClassFactory mFactory = null;

	/** KXEN Transform oject. */
	private KxenTransform mTransform = null;

	/** KXEN Transform unique name. */
	private String mTransformName = "";

	/** Context class used by KXEN to display messages. */
	private KxContext mContext;

	/**
	 * Language variable used to specify to the context class which messages to
	 * print.
	 */
	private String mLanguage = "us";

	/** Level limit of the messages to print by context object */
	private int mMsgLevel = 6;

	/** Choose a method for the communication with the KXEN server */
	private boolean mUseSend = false;
	
	String[] lExcluded = { "ID", "FirstName", "LastName", "Level4", "Level5" };
	String[] lTarget = { "Level1", "Level2", "Level3" };
	String[] lInput = { "Gender", "Age", "Drive", "Coffee" };
	
	// ---------------------- METHODS OF THE CLASS --------------------------

	/**
	 * Main method: should process args and so on...
	 * 
	 * @param iArgs
	 *            System arguments
	 */
	public static void main(String[] iArgs) {
		iArgs=new String[2];
		iArgs[0]="level1";
		if(iArgs!=null && iArgs[0]=="Level4"){
			String[] lExcluded = { "ID", "FirstName", "LastName" };
			String[] lTarget = {"Level4", "Level5"};
			String[] lInput = { "Gender", "Age", "Drive", "Coffee","Level1", "Level2", "Level3"  };
		}
		
		KxTutorial lLearner = new KxTutorial();
		try {
			lLearner.tutorial();
		} catch (DynamicMethodException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param iMessage
	 *            message to show
	 */
	private void trace(String iMessage) {
		System.out.println("\n\t" + iMessage + "\n");
	}

	/**
	 * Main method of the class. It follows all elements of the tutorial, all
	 * basic steps of KXEN use.
	 * 
	 * @throws DynamicMethodException
	 *             if KXEN can not be started
	 * @throws InvocationTargetException
	 *             if KXEN can not be started
	 */
	private void tutorial() throws DynamicMethodException, InvocationTargetException {
		trace("KxTutorial.tutorial()");
		// Create context object to be used by KXEN for catching and
		// displaying messages from KXEN.
		mContext = new KxContext();

		// Create a KXEN Factory and put it in a Class variable
		trace("Create a KXEN factory");
		mFactory = KxenClassFactory.getJNIFactory(CONFIG_DIR, CONFIG_FILE);

		// Create and setup the model
		trace("Create a Model object");
		createModel();

		// Set the data sets of the model
		trace("Set the data sets");
		setDataSets();

		// Validate changes. Send back the Parameter'sTRee
		trace("Validate Parameters changes");

		mModel.validateParameter();

		// Refresh the Parameter tree
		trace("Refresh the Parameter tree");
		KxenParameter lParameterP = mModel.getParameter("");
		lParameterP.release();

		// Set variables roles
		trace("Set Variables roles");
		
		setVariablesRole("skip", lExcluded);

		
		setVariablesRole("target", lTarget);

		
		setVariablesRole("input", lInput);

		// Validate changes. Send back the Parameter'sTRee
		trace("Validate Parameters changes");
		mModel.validateParameter();

		// Set the data sets, the variables roles and the Model Parameters
		trace("Set Model's Parameters");
		setParameters();

		// Train the model on the training data set
		trace("Train the Model");
		trainModel();
		// mModel.generateCode("JAVA", "C:\\Users\\i859995\\Documents\\Working
		// java files", "htmlexpoerted27FebNew.java");

		// Apply the model on a file
		trace("Apply Model on a file - Apply");
		applyModel();

		// Refresh the Parameter tree
		trace("Refresh the Parameter tree");
		KxenParameter lParameter = mModel.getParameter("");
		lParameter.release();

		// Show Variable contributions
		trace("Show Variable contributions for Level1");
		getVariableContributions("Level1");

		// Show Quality indicators
		trace("Show Quality indicators");
		getKiKr();

		// Save the model on a data source
		trace("Save the Model");
		saveModel();

		// Releasing a Model
		trace("Release the model");
		mModel.release();

		DbUtil.viewDetailsHana("1");
	}

	/**
	 * Create a model ----> Build a simple Model
	 */
	private void createModel() {
		// Ask the Factory to create a Model
		mModel = mFactory.createModel("Kxen.SimpleModel");

		// Set the context Object
		mModel.setContext(mContext, mLanguage, mMsgLevel, false);

		// A model need to have at least one transformation,
		// here we pushed a Regression in the protocol.
		int lTransforPlace = mModel.pushTransformInProtocol("Default", sModelTransformation);
		mTransform = mModel.getTransformInProtocol("Default", lTransforPlace);

		mTransformName = mTransform.getName();
	}

	/**
	 * Set the data sets parameters
	 */
	private void setDataSets() {
		/// Open the Store containing the learn data
		int lStoreIndex = mModel.openNewStore(sStoreClass, sStoreName, "dba", "Test123!");

		// Setting the data sets
		// Assign to a space (a file) of the opened store the role of 'Training'
		// This is the way to tell to the Model what is the Training data set.
		mModel.newDataSet("Training", sDataFile, lStoreIndex);
		trace("stopped after this");
		mModel.readSpaceDescription("Training", sDescriptionFile, lStoreIndex);
	}

	/**
	 * Set the role value for a list of variables
	 * 
	 * @param iRole
	 *            New role for the list of fields
	 * @param iNames
	 *            Names of the fields whose Role need to be changed
	 */
	private void setVariablesRole(String iRole, String[] iNames) {
		String lPath = "Protocols/Default/Variables/";
		for (int lIdx = 0; lIdx < iNames.length; lIdx++) {
			System.out.println();
			String lCompletePath = lPath + iNames[lIdx] + "/Role";
			mModel.changeParameter(lCompletePath, iRole);
		}
	}

	/**
	 * Set parameters of the model.
	 */
	private void setParameters() {
		// Use the model object to access to the whole Parameters tree and
		// modify any parameter inside it.
		KxenParameter lParameterP = mModel.getParameter("");
		lParameterP.release();

		mModel.changeParameter("Parameters/CutTrainingPolicy", "random with no test");
		mModel.validateParameter();

		// It is possible to use the transformation object to modify a Parameter
		// value. Here the validate parameters method is much more lite than
		// the model's one.
		lParameterP = mTransform.getParameter("");
		lParameterP.release();

		mTransform.changeParameter("Parameters/Order", "1");

		// new:
		// mTransform.changeParameter("Protocols/Default/Transforms/Kxen.RobustRegression/Parameters/ExtraMode",
		// "For K2R copy data");
		// mTransform.changeParameter("Parameters/ExtraMode", "Advanced Apply
		// Settings");
		mTransform.changeParameter("Parameters/RiskMode/RiskFitting/MinCumulatedFrequency", "0.15");
		mTransform.changeParameter("Parameters/RiskMode/RiskFitting/UseWeights", "true");
		mTransform.changeParameter("Parameters/Strategy", "WithOriginalTargetEncoding");
		mTransform.changeParameter("Parameters/VariableSelection/SelectionMode/Mode", "ContributionBased");
		mTransform.changeParameter("Parameters/VariableSelection/StopCriteria/QualityBar", "0.05");

		mTransform.validateParameter();

		// mModel.changeParameter("Parameters/StrangeValueLevel", "12");
		// mModel.changeParameter("Parameters/CopyTarget", "true");
		// mModel.changeParameter("Parameters/SoftMode", "true");
		// mModel.validateParameter();

		// mModel.changeParameter "Parameters/StrangeValueLevel" "12"
		// mModelp.changeParameter "Parameters/StrangeValuePolicy" "dialog"
		// p.changeParameter "Parameters/CopyTarget" "true"
		// p.changeParameter "Parameters/UseDateCoder" "true"
		// p.changeParameter "Parameters/ApplyInDataBase" "true"
		// p.changeParameter "Parameters/ModellingInDataBase" "true"
		// p.changeParameter "Parameters/IDBAFallbackToRegularApply" "true"
		// p.changeParameter "Parameters/SoftMode" "true"

	}

	/**
	 * Train a Model on a defined data set. There are here two methods do this
	 * task, the send and the post mode.
	 */
	private void trainModel() {
		// Two methods of communications with the KXEN server are shown here.
		if (mUseSend) {
			// The send mode will inform the server the task to do.
			try {
				mModel.sendMode(KxenModeTag.Kxen_learn, 0);
			} catch (KxenAbortException e) {
				System.err.println("Learn stopped.");
			}
		} else {
			// The post mode, send the information to the server and the
			// client wait for the end of the process
			mModel.postMode(com.kxen.CommonInterf.KxenModeTag.Kxen_learn, 0);

			// In this mode, it is necessary to ask to the model if he has
			// finished his learn phase.
			waitWhileRunning();
		}

		if (!mModel.isReady()) {
			System.err.println("Learn failed");
			return;
		}
	}

	/**
	 * Use the model with a some other input data
	 */
	private void applyModel() {
		// Open the Store containing the apply data
		int lStoreIndex = mModel.openNewStore(sStoreClass, sStoreName, "dba", "Test123!");

		// Set input and output datasets for Apply
		mModel.newDataSet("ApplyIn", sUsingModelInput, lStoreIndex);
		mModel.newDataSet("ApplyOut", sUsingModelOutput, lStoreIndex);
		try {
			mModel.sendMode(KxenModeTag.Kxen_apply, 0);
		} catch (KxenAbortException e) {
			System.err.println("Apply stopped");
		}
	}

	/**
	 * Save a model on a datasource. In this example, the Model is stored in a
	 * file on the disk.
	 */
	private void saveModel() {
		// Create new data store to hold the model
		int lStoreIndex = mModel.openNewStore(sModelStoreClass, sModelStoreName, "", "");

		// Set the model's name
		mModel.setName(sModelName);

		// Save the model really
		mModel.saveModel(lStoreIndex, sModelSpaceName, sModelComment);
	}

	/**
	 * Get for the main transformation the contribution of each variable
	 */
	private void getVariableContributions(String targetVariable) {
		// Load variables names and role from the model
		String lParameterName = "Protocols/Default/Transforms/" + mTransformName + "/Results/" + targetVariable
				+ "/Coefficients";
		KxenParameter lParam = mModel.getParameter(lParameterName);

		// Get roles as an array of key(variable name)/value(role)
		DataTable lRoles = lParam.getSubEntries("Contrib");
		System.out.println("-- Contributions of each variable --");
		for (int lIdx = 0; lIdx < lRoles.getRowCount(); lIdx++) {
			System.out.print(lRoles.getRowName(lIdx));
			System.out.print(" = ");
			System.out.println(lRoles.getValue(lIdx, 0));
		}
	}

	/**
	 * Get statistics values for Kr and Ki
	 */
	private void getKiKr() {
		String lDatasetKi = "Validation";
		String lDatasetKr = "Estimation";
		String lVariable = "Age";
		String lClassName = "Level2";

		System.out.println("Value of Kr = " + getStatisticsValue(lVariable, lDatasetKr, lClassName, "Kr"));

		System.out.println("Value of Ki = " + getStatisticsValue(lVariable, lDatasetKi, lClassName, "Ki"));
	}

	/**
	 * Get a statistic value on the parameter tree
	 * 
	 * @param iVariable
	 *            Name of the variable
	 * @param iDataset
	 *            Name of the data set
	 * @param iTarget
	 *            Name of the target containing the desired statistic
	 * @param iElement
	 *            Name of the statistic variable
	 * @return double statistic value. Return -1 if any error on converting to
	 *         double
	 */
	private double getStatisticsValue(String iVariable, String iDataset, String iTarget, String iElement) {
		double lDoubleValue = 0;
		String lPathKr = "Protocols/Default/Variables/" + iVariable + "/Statistics/" + iDataset + "/Targets/" + iTarget
				+ "/" + iElement;
		try {
			KxenParameter lParam = mModel.getParameter("");
			String lString = lParam.getSubValue(lPathKr);

			// String lPathKrNew = "Protocols/Default/Variables/Parameters/";
			// String lString2 = lParam.getSubTree();
			// System.out.println(lString2);

			lDoubleValue = Double.parseDouble(lString);
		} catch (NumberFormatException e) {
			lDoubleValue = -1;
		}
		return lDoubleValue;
	}

	/**
	 * Use the Model object to know if the current process is finished.
	 */
	private void waitWhileRunning() {
		while (mModel.isRunning()) {
			try {
				// To avoid too much communication
				Thread.sleep(400);
			} catch (InterruptedException e) {
				System.err.println("Waiting method failed");
			}
		}
	}
}
